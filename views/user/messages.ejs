<%- contentFor('body') %>

<div class="dashboard-container">
  <!-- Left Navbar -->
  <nav class="navbar">
    <div class="navbar-header">
      <div class="logo">
        <i class="fas fa-headset"></i>
        <span class="logo-text">Helpdesk</span>
      </div>
      <div class="navbar-toggle">
        <i class="fas fa-bars"></i>
      </div>
    </div>
    
    <div class="navbar-items">
      <!-- User Navigation -->
      <a href="/user/dashboard" class="navbar-item">
        <i class="fas fa-home"></i>
        <span>Dashboard</span>
      </a>
      <a href="/user/tickets" class="navbar-item">
        <i class="fas fa-ticket-alt"></i>
        <span>My Tickets</span>
      </a>
      <a href="/user/messages" class="navbar-item active">
        <i class="fas fa-comments"></i>
        <span>Messages</span>
      </a>
      <a href="#" class="navbar-item" data-panel="new-ticket-panel">
        <i class="fas fa-plus-circle"></i>
        <span>New Ticket</span>
      </a>
      <a href="/user/settings" class="navbar-item">
        <i class="fas fa-cog"></i>
        <span>Settings</span>
      </a>
      
      <!-- Logout -->
      <a href="/auth/logout" class="navbar-item">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
      </a>
    </div>
  </nav>
  
  <!-- Main Content -->
  <div class="main-content">
    <!-- Left Panel (Conversations) -->
    <div class="panel left-panel">
      <div class="panel-header">
        <h2>Mine meldinger</h2>
        <div class="panel-actions">
          <button class="btn btn-primary" id="start-chat-btn">
            <i class="fas fa-comment"></i> Ny chat
          </button>
        </div>
      </div>
      <div class="panel-content">
        <% if (conversations && conversations.length > 0) { %>
          <div class="conversations-list">
            <% conversations.forEach(conversation => { %>
              <div class="conversation-item" data-id="<%= conversation.userId %>">
                <div class="conversation-avatar">
                  <% if (conversation.user && (conversation.user.role === 'admin' || conversation.user.role === 'head_admin')) { %>
                    <i class="fas fa-headset"></i>
                  <% } else if (conversation.user) { %>
                    <%= conversation.user.name.charAt(0).toUpperCase() %>
                  <% } else { %>
                    <i class="fas fa-user"></i>
                  <% } %>
                </div>
                <div class="conversation-details">
                  <div class="conversation-header">
                    <h4 class="conversation-name">
                      <%= conversation.user ? conversation.user.name : 'Unknown User' %>
                      <% if (conversation.user && (conversation.user.role === 'admin' || conversation.user.role === 'head_admin')) { %>
                        <span class="badge admin-badge">Support</span>
                      <% } %>
                    </h4>
                    <% if (conversation.lastMessage) { %>
                      <span class="conversation-time">
                        <%= formatTimeAgo(conversation.lastMessage.createdAt) %>
                      </span>
                    <% } %>
                  </div>
                  <% if (conversation.lastMessage) { %>
                    <div class="conversation-preview">
                      <%= conversation.lastMessage.content.length > 40 ? 
                         conversation.lastMessage.content.substring(0, 40) + '...' : 
                         conversation.lastMessage.content %>
                    </div>
                  <% } %>
                </div>
              </div>
            <% }); %>
          </div>
        <% } else { %>
          <div class="empty-conversations">
            <div class="empty-icon">
              <i class="fas fa-comments"></i>
            </div>
            <h3>Ingen samtaler ennå</h3>
            <p>Start en ny chat med vårt supportteam.</p>
            <button class="btn btn-primary" id="empty-start-chat">
              <i class="fas fa-comment"></i> Start ny chat
            </button>
          </div>
        <% } %>
      </div>
    </div>
    
    <!-- Panel Divider -->
    <div class="panel-divider">
      <span class="divider-icon">⋮⋮</span>
    </div>
    
    <!-- Right Panel (Chat) -->
    <div class="panel right-panel">
      <div class="panel-header">
        <h2 id="conversation-header">Select a conversation</h2>
        <div id="agent-status" class="agent-status" style="display: none;">
          <span class="status-dot"></span>
          <span class="status-text"></span>
        </div>
      </div>
      <div class="panel-content">
        <div class="chat-container">
          <div class="empty-chat-message" id="empty-chat">
            <div class="empty-icon">
              <i class="fas fa-comments"></i>
            </div>
            <h3>Ingen samtale valgt</h3>
            <p>Velg en samtale fra listen eller start en ny chat.</p>
            <button class="btn btn-primary" id="empty-panel-start-chat">
              <i class="fas fa-comment"></i> Start ny chat
            </button>
          </div>
          
          <div class="chat-messages" id="chat-messages" style="display: none;">
            <!-- Messages will be loaded here -->
          </div>
          
          <div class="chat-input" id="chat-input-container" style="display: none;">
            <form id="message-form" enctype="multipart/form-data">
              <div class="attachments-container" id="message-attachments-preview"></div>
              <div class="message-input-container">
                <textarea placeholder="Type your message here..." id="message-input" 
                          onkeydown="if(event.keyCode === 13 && !event.shiftKey) { event.preventDefault(); sendMessage(); }"></textarea>
                <div class="chat-actions">
                  <label for="message-file-upload" class="attachment-btn">
                    <i class="fas fa-paperclip"></i>
                  </label>
                  <input type="file" id="message-file-upload" name="attachments" multiple style="display: none;" accept="image/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.csv">
                  <button type="button" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- New Chat Modal -->
<div id="new-chat-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Start ny chat</h2>
    <div class="support-status-info" id="support-status">
      <div class="status-indicator available">
        <i class="fas fa-circle"></i>
        <span>Support-agenter er tilgjengelige</span>
      </div>
    </div>
    <form id="new-chat-form">
      <div class="form-group">
        <label for="chat-category">Hva kan vi hjelpe deg med?</label>
        <select id="chat-category" name="category" required>
          <option value="">Velg en kategori</option>
          <option value="technical">Teknisk problem</option>
          <option value="account">Kontoproblem</option>
          <option value="billing">Fakturering</option>
          <option value="feature">Funksjonsforespørsel</option>
          <option value="other">Annet</option>
        </select>
      </div>
      <div class="form-group">
        <label for="chat-message">Beskriv problemet ditt</label>
        <textarea id="chat-message" name="message" rows="4" placeholder="Hvordan kan vi hjelpe deg i dag?" required></textarea>
      </div>
      <button type="submit" class="btn btn-primary btn-block">Start chat</button>
    </form>
  </div>
</div>

<% contentFor('script') %>
<script src="/socket.io/socket.io.js"></script>
<script>
  let socket;
  let currentConversation = null;
  let conversations = {};
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize socket connection
    socket = io();
    
    // Set up conversation click handler
    const conversationItems = document.querySelectorAll('.conversation-item');
    conversationItems.forEach(item => {
      item.addEventListener('click', function() {
        const userId = this.getAttribute('data-id');
        loadConversation(userId);
      });
    });
    
    // New chat buttons
    const newChatButtons = document.querySelectorAll('#start-chat-btn, #empty-start-chat, #empty-panel-start-chat');
    newChatButtons.forEach(button => {
      button.addEventListener('click', showNewChatModal);
    });
    
    // Modal close button
    document.querySelector('#new-chat-modal .close').addEventListener('click', function() {
      document.getElementById('new-chat-modal').style.display = 'none';
    });
    
    // Close modal when clicking outside
    window.onclick = function(event) {
      if (event.target === document.getElementById('new-chat-modal')) {
        document.getElementById('new-chat-modal').style.display = 'none';
      }
    };
    
    // New chat form submission
    document.getElementById('new-chat-form').addEventListener('submit', function(e) {
      e.preventDefault();
      startNewChat();
    });
    
    // Check URL params for auto-loading chat
    const urlParams = new URLSearchParams(window.location.search);
    const chatId = urlParams.get('chat');
    if (chatId) {
      loadConversation(chatId);
    }
    
    // Socket event listeners
    setupSocketListeners();
  });
  
  function setupSocketListeners() {
    socket.on('connect', function() {
      console.log('Connected to socket server');
      
      // Request current support status
      socket.emit('request-support-status');
    });
    
    // Listen for new messages
    socket.on('new-message', function(data) {
      if (currentConversation === data.sender.id) {
        // Add to current conversation
        appendMessage(data);
      } else {
        // Update conversation preview and add notification
        updateConversationPreview(data.sender.id, data);
      }
    });
    
    // Support status update
    socket.on('support-status-update', function(data) {
      updateSupportStatus(data.available, data.waitTime);
    });
    
    // Chat ended by admin
    socket.on('chat-ended', function(data) {
      if (currentConversation === data.adminId) {
        appendSystemMessage('This chat session has ended. Feel free to start a new chat if you need further assistance.');
        
        // Disable input
        document.getElementById('message-input').disabled = true;
        document.getElementById('message-input').placeholder = 'Chat session has ended';
      }
    });
  }
  
  function updateSupportStatus(available, waitTime) {
    const statusContainer = document.getElementById('support-status');
    const statusIndicator = statusContainer.querySelector('.status-indicator');
    
    statusIndicator.className = 'status-indicator ' + (available ? 'available' : 'unavailable');
    
    if (available) {
      statusIndicator.querySelector('span').textContent = 'Support-agenter er tilgjengelige';
    } else {
      statusIndicator.querySelector('span').textContent = 'Alle support-agenter er opptatt for øyeblikket';
      
      if (waitTime) {
        const waitInfo = document.createElement('div');
        waitInfo.className = 'wait-time';
        waitInfo.textContent = `Estimert ventetid: ${waitTime} minutter`;
        statusIndicator.appendChild(waitInfo);
      }
    }
  }
  
  function showNewChatModal() {
    document.getElementById('new-chat-modal').style.display = 'block';
  }
  
  function startNewChat() {
    const category = document.getElementById('chat-category').value;
    const message = document.getElementById('chat-message').value;
    
    if (!category || !message) {
      if (window.notifications) {
        window.notifications.error('Please complete all fields');
      }
      return;
    }
    
    // Close modal
    document.getElementById('new-chat-modal').style.display = 'none';
    
    // Show loading state
    document.getElementById('conversation-header').textContent = 'Finner tilgjengelig agent...';
    document.getElementById('empty-chat').innerHTML = `
      <div class="loading-state">
        <div class="spinner"></div>
        <p>Kobler deg til en support-agent...</p>
      </div>
    `;
    document.getElementById('empty-chat').style.display = 'block';
    document.getElementById('chat-messages').style.display = 'none';
    document.getElementById('chat-input-container').style.display = 'none';
    
    // Send request to server
    fetch('/chat/conversation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        category,
        message
      })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (data.status === 'pending' || data.status === 'queued') {
            // Redirect to waiting page
            window.location.href = `/user/chat/waiting?requestId=${data.requestId}&category=${category}&message=${encodeURIComponent(message)}`;
          } else {
            // Chat created successfully, load conversation
            if (data.user && data.user._id) {
              loadConversation(data.user._id);
            }
          }
        } else {
          if (window.notifications) {
            window.notifications.error(data.message);
          }
          
          // Reset to empty state
          document.getElementById('conversation-header').textContent = 'Select a conversation';
          document.getElementById('empty-chat').innerHTML = `
            <div class="empty-icon">
              <i class="fas fa-comments"></i>
            </div>
            <h3>No Conversation Selected</h3>
            <p>Select a conversation from the list or start a new chat.</p>
            <button class="btn btn-primary" id="empty-panel-start-chat">
              <i class="fas fa-comment"></i> Start New Chat
            </button>
          `;
          
          // Re-add event listener
          document.getElementById('empty-panel-start-chat').addEventListener('click', showNewChatModal);
        }
      })
      .catch(error => {
        console.error('Error starting chat:', error);
        if (window.notifications) {
          window.notifications.error('An error occurred while starting the chat');
        }
      });
  }
  
  function loadConversation(userId) {
    // Get conversation from server
    fetch(`/chat/conversation/${userId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Store current conversation
          currentConversation = userId;
          
          // Update header with user's name
          document.getElementById('conversation-header').textContent = data.user.name;
          
          // Show agent status if admin
          if (data.user.role === 'admin' || data.user.role === 'head_admin') {
            const agentStatus = document.getElementById('agent-status');
            agentStatus.style.display = 'flex';
            
            // Set status (this would come from the server in a real implementation)
            updateAgentStatus(data.user.status || 'available');
          } else {
            document.getElementById('agent-status').style.display = 'none';
          }
          
          // Show chat interface
          document.getElementById('empty-chat').style.display = 'none';
          document.getElementById('chat-messages').style.display = 'block';
          document.getElementById('chat-input-container').style.display = 'block';
          
          // Clear previous messages
          document.getElementById('chat-messages').innerHTML = '';
          
          // Add messages
          if (data.messages && data.messages.length > 0) {
            data.messages.forEach(message => {
              appendMessage({
                sender: {
                  id: message.sender._id,
                  name: message.sender.name,
                  role: message.sender.role
                },
                message: message.content,
                timestamp: message.createdAt,
                attachments: message.attachments
              });
            });
          } else {
            // Add welcome message if no messages
            appendSystemMessage('Start chatting with our support team!');
          }
          
          // Mark as active in UI
          document.querySelectorAll('.conversation-item').forEach(item => {
            item.classList.remove('active');
            if (item.getAttribute('data-id') === userId) {
              item.classList.add('active');
            }
          });
          
          // Mark messages as read
          fetch(`/chat/mark-read/${userId}`, { method: 'POST' })
            .catch(error => console.error('Error marking as read:', error));
          
          // Enable input if chat is active
          document.getElementById('message-input').disabled = false;
          document.getElementById('message-input').placeholder = 'Type your message here...';
          
          // Scroll to bottom
          const messagesContainer = document.getElementById('chat-messages');
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        } else {
          if (window.notifications) {
            window.notifications.error(data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error loading conversation:', error);
        if (window.notifications) {
          window.notifications.error('Failed to load conversation');
        }
      });
  }
  
  function updateAgentStatus(status) {
    const agentStatus = document.getElementById('agent-status');
    const statusDot = agentStatus.querySelector('.status-dot');
    const statusText = agentStatus.querySelector('.status-text');
    
    // Remove current status classes
    statusDot.classList.remove('available', 'working', 'offline');
    
    // Add new status class
    statusDot.classList.add(status);
    
    // Update text
    statusText.textContent = status.charAt(0).toUpperCase() + status.slice(1);
  }
  
  function sendMessage() {
    if (!currentConversation) return;
    
    const messageInput = document.getElementById('message-input');
    const fileInput = document.getElementById('message-file-upload');
    const message = messageInput.value.trim();
    
    // Check if there's a message or files
    if (!message && (!fileInput.files || fileInput.files.length === 0)) return;
    
    // Create FormData to handle files
    const formData = new FormData();
    formData.append('message', message);
    formData.append('recipientId', currentConversation);
    
    // Add files if any
    if (fileInput.files && fileInput.files.length > 0) {
      for (let i = 0; i < fileInput.files.length; i++) {
        formData.append('attachments', fileInput.files[i]);
      }
    }
    
    // Clear input
    messageInput.value = '';
    fileInput.value = '';
    clearAttachmentPreviews();
    
    // Send message
    fetch('/chat/send', {
      method: 'POST',
      body: formData
    })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          if (window.notifications) {
            window.notifications.error(data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error sending message:', error);
        if (window.notifications) {
          window.notifications.error('Failed to send message');
        }
      });
  }
  
  function appendMessage(data) {
    const messagesContainer = document.getElementById('chat-messages');
    const isFromCurrentUser = data.sender.id === '<%= user._id %>';
    
    let attachmentsHTML = '';
    if (data.attachments && data.attachments.length > 0) {
      attachmentsHTML = '<div class="message-attachments">';
      data.attachments.forEach(attachment => {
        if (attachment.mimetype.startsWith('image/')) {
          attachmentsHTML += `
            <div class="attachment-item image">
              <a href="/${attachment.path}" target="_blank">
                <img src="/${attachment.path}" alt="${attachment.originalname}">
              </a>
            </div>
          `;
        } else {
          attachmentsHTML += `
            <div class="attachment-item file">
              <a href="/${attachment.path}" target="_blank" class="file-attachment">
                <i class="${getFileIcon(attachment.mimetype)}"></i>
                <span>${attachment.originalname}</span>
              </a>
            </div>
          `;
        }
      });
      attachmentsHTML += '</div>';
    }
    
    const messageEl = document.createElement('div');
    messageEl.className = `message ${isFromCurrentUser ? 'outgoing' : 'incoming'}`;
    
    messageEl.innerHTML = `
      <div class="message-avatar">
        ${isFromCurrentUser ? '<%= user.name.charAt(0).toUpperCase() %>' : 
          data.sender.role === 'admin' || data.sender.role === 'head_admin' ? 
          '<i class="fas fa-headset"></i>' : 
          data.sender.name.charAt(0).toUpperCase()}
      </div>
      <div class="message-content">
        <div class="message-sender">
          ${data.sender.name}
          ${data.sender.role === 'admin' || data.sender.role === 'head_admin' ? 
            '<span class="badge admin-badge">Support</span>' : ''}
        </div>
        <div class="message-bubble">
          ${data.message}
        </div>
        ${attachmentsHTML}
        <div class="message-time">
          ${formatTime(data.timestamp)}
        </div>
      </div>
    `;
    
    messagesContainer.appendChild(messageEl);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
  
  function appendSystemMessage(message) {
    const messagesContainer = document.getElementById('chat-messages');
    
    const messageEl = document.createElement('div');
    messageEl.className = 'message system';
    
    messageEl.innerHTML = `
      <div class="system-message">
        <i class="fas fa-info-circle"></i>
        <span>${message}</span>
      </div>
    `;
    
    messagesContainer.appendChild(messageEl);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
  
  function updateConversationPreview(userId, data) {
    // Find conversation item
    const conversationItem = document.querySelector(`.conversation-item[data-id="${userId}"]`);
    
    if (conversationItem) {
      // Update preview text
      const previewEl = conversationItem.querySelector('.conversation-preview');
      if (previewEl) {
        previewEl.textContent = data.message.length > 40 ? data.message.substring(0, 40) + '...' : data.message;
      }
      
      // Update time
      const timeEl = conversationItem.querySelector('.conversation-time');
      if (timeEl) {
        timeEl.textContent = 'Just now';
      }
      
      // Add unread indicator if not current conversation
      if (currentConversation !== userId) {
        conversationItem.classList.add('unread');
      }
      
      // Move to top of list
      const parent = conversationItem.parentNode;
      parent.insertBefore(conversationItem, parent.firstChild);
    } else {
      // This is a new conversation, refresh to show it
      if (window.notifications) {
        window.notifications.info('New message from ' + data.sender.name, 'New Message');
      }
    }
  }
  
  function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }
  
  function getFileIcon(mimetype) {
    if (mimetype.startsWith('image/')) return 'fas fa-file-image';
    if (mimetype === 'application/pdf') return 'fas fa-file-pdf';
    if (mimetype.includes('word')) return 'fas fa-file-word';
    if (mimetype.includes('excel') || mimetype.includes('spreadsheet')) return 'fas fa-file-excel';
    if (mimetype.includes('powerpoint') || mimetype.includes('presentation')) return 'fas fa-file-powerpoint';
    if (mimetype.includes('text/')) return 'fas fa-file-alt';
    return 'fas fa-file';
  }
  
  // File upload preview
  document.getElementById('message-file-upload').addEventListener('change', function(e) {
    const files = e.target.files;
    const previewContainer = document.getElementById('message-attachments-preview');
    
    clearAttachmentPreviews();
    
    if (files.length > 0) {
      previewContainer.style.display = 'flex';
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const previewItem = document.createElement('div');
        previewItem.className = 'attachment-preview';
        
        if (file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.src = URL.createObjectURL(file);
          previewItem.appendChild(img);
        } else {
          const icon = document.createElement('i');
          icon.className = getFileIcon(file.type);
          previewItem.appendChild(icon);
        }
        
        const fileName = document.createElement('span');
        fileName.textContent = file.name.length > 15 ? file.name.substring(0, 12) + '...' : file.name;
        fileName.className = 'file-name';
        previewItem.appendChild(fileName);
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-attachment';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.setAttribute('data-index', i);
        removeBtn.onclick = function() {
          // Create a new FileList without this file
          const dt = new DataTransfer();
          const input = document.getElementById('message-file-upload');
          
          for (let j = 0; j < input.files.length; j++) {
            if (j !== parseInt(this.getAttribute('data-index'))) {
              dt.items.add(input.files[j]);
            }
          }
          
          input.files = dt.files;
          
          // Update preview
          if (input.files.length === 0) {
            clearAttachmentPreviews();
          } else {
            this.parentElement.remove();
          }
        };
        
        previewItem.appendChild(removeBtn);
        previewContainer.appendChild(previewItem);
      }
    }
  });
  
  function clearAttachmentPreviews() {
    const previewContainer = document.getElementById('message-attachments-preview');
    previewContainer.innerHTML = '';
    previewContainer.style.display = 'none';
  }
</script>
