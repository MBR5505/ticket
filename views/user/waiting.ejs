<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Waiting for Admin Approval - Helpdesk Ticket System</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- contentFor('body') %>

  <div class="waiting-page">
    <div class="waiting-header">
      <div class="logo">
        <i class="fas fa-headset"></i>
        <span>Helpdesk</span>
      </div>
      <h1>Admin Request Pending</h1>
    </div>
    
    <div class="waiting-content">
      <div class="waiting-icon">
        <i class="fas fa-clock"></i>
      </div>
      <h2>Your request for admin privileges is being reviewed</h2>
      <p>Thank you for requesting administrative access to the system. Your request has been received and is currently being reviewed by our head administrators.</p>
      <p>Once your request is processed, you will be notified and automatically redirected to the appropriate dashboard.</p>
      
      <div class="waiting-status">
        <div class="status-indicator"></div>
        <span>Waiting for approval</span>
      </div>
    </div>
    
    <div class="waiting-footer">
      <a href="/auth/logout" class="btn btn-secondary">
        <i class="fas fa-sign-out-alt"></i> Logout
      </a>
    </div>
  </div>

  <div class="chat-waiting-container">
    <div class="waiting-card">
      <div class="waiting-header">
        <div class="logo">
          <i class="fas fa-headset"></i>
          <span>Helpdesk</span>
        </div>
        <h2>Connecting to Support</h2>
      </div>
      
      <div class="waiting-content">
        <div class="waiting-animation">
          <div class="spinner"></div>
        </div>
        
        <div class="waiting-status">
          <p id="status-message">Looking for an available support agent...</p>
          <div class="waiting-time">
            <span>Waiting time: </span>
            <span id="waiting-timer">0:00</span>
          </div>
        </div>
        
        <div class="request-details">
          <div class="request-item">
            <span class="request-label">Topic:</span>
            <span class="request-value"><%= category %></span>
          </div>
          <div class="request-item">
            <span class="request-label">Your message:</span>
            <span class="request-value message-preview"><%= message %></span>
          </div>
        </div>
      </div>
      
      <div class="waiting-actions">
        <button id="cancel-request" class="btn btn-secondary">Cancel Request</button>
        <button id="create-ticket" class="btn btn-primary">Create Ticket Instead</button>
      </div>
    </div>
    
    <div class="support-info">
      <h3>While You Wait</h3>
      <p>You might find an answer to your question in our self-help resources:</p>
      <div class="help-resources">
        <a href="#" class="resource-card">
          <i class="fas fa-book"></i>
          <span>Knowledge Base</span>
        </a>
        <a href="#" class="resource-card">
          <i class="fas fa-question-circle"></i>
          <span>FAQs</span>
        </a>
        <a href="#" class="resource-card">
          <i class="fas fa-tools"></i>
          <span>Troubleshooting</span>
        </a>
      </div>
    </div>
  </div>

  <% contentFor('script') %>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Connect to socket server to get real-time updates
      const socket = io({
        auth: {
          token: getCookie('jwt')
        }
      });
      
      socket.on('connect', function() {
        console.log('Connected to server');
      });
      
      // Listen for admin request approval
      socket.on('admin-request-approved', function(data) {
        // Show success notification
        if (window.notifications) {
          window.notifications.success(data.message || 'Your admin request has been approved!');
        } else {
          alert('Your admin request has been approved!');
        }
        
        // Redirect to admin dashboard after a short delay
        setTimeout(function() {
          window.location.href = '/admin/dashboard';
        }, 2000);
      });
      
      // Listen for admin request denial
      socket.on('admin-request-denied', function(data) {
        // Show error notification
        if (window.notifications) {
          window.notifications.error(data.message || 'Your admin request has been denied.');
        } else {
          alert('Your admin request has been denied.');
        }
        
        // Redirect to user dashboard after a short delay
        setTimeout(function() {
          window.location.href = '/user/dashboard';
        }, 2000);
      });
    });
    
    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
    }
  </script>
  <script>
    let socket;
    let waitingStartTime;
    let requestId = '<%= requestId %>';
    let timerInterval;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize socket
      socket = io();
      
      // Set waiting start time
      waitingStartTime = new Date();
      
      // Start waiting timer
      startWaitingTimer();
      
      // Listen for socket events
      setupSocketListeners();
      
      // Button event listeners
      document.getElementById('cancel-request').addEventListener('click', cancelRequest);
      document.getElementById('create-ticket').addEventListener('click', createTicket);
    });
    
    function setupSocketListeners() {
      // Connection established
      socket.on('connect', function() {
        console.log('Connected to server');
      });
      
      // Chat request accepted
      socket.on('chat-request-accepted', function(data) {
        stopWaitingTimer();
        updateStatusMessage('Support agent found! Connecting you now...');
        
        // Redirect to chat
        setTimeout(() => {
          window.location.href = `/user/messages?chat=${data.adminId}`;
        }, 1500);
      });
      
      // Chat request reassigned
      socket.on('chat-request-reassigned', function(data) {
        updateStatusMessage(data.message || 'Your request is being reassigned to another agent...');
      });
      
      // Chat request failed
      socket.on('chat-request-failed', function(data) {
        stopWaitingTimer();
        updateStatusMessage(data.message || 'No support agents are available right now');
        
        // Show create ticket button prominently
        document.getElementById('create-ticket').style.backgroundColor = 'var(--primary-color)';
        document.getElementById('create-ticket').classList.add('pulse-animation');
        
        // Hide cancel button
        document.getElementById('cancel-request').style.display = 'none';
      });
    }
    
    function startWaitingTimer() {
      timerInterval = setInterval(updateWaitingTime, 1000);
    }
    
    function stopWaitingTimer() {
      clearInterval(timerInterval);
    }
    
    function updateWaitingTime() {
      const now = new Date();
      const diffInSeconds = Math.floor((now - waitingStartTime) / 1000);
      
      const minutes = Math.floor(diffInSeconds / 60);
      const seconds = diffInSeconds % 60;
      
      document.getElementById('waiting-timer').textContent = 
        `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
      
      // If waiting too long (over 5 minutes), suggest creating a ticket
      if (diffInSeconds > 300) {
        updateStatusMessage('Support agents are busy. Consider creating a ticket instead.');
        document.getElementById('create-ticket').style.backgroundColor = 'var(--primary-color)';
        document.getElementById('create-ticket').classList.add('pulse-animation');
      }
    }
    
    function updateStatusMessage(message) {
      document.getElementById('status-message').textContent = message;
    }
    
    function cancelRequest() {
      // Emit cancel event to server
      socket.emit('cancel-chat-request', { requestId });
      
      // Redirect back to dashboard
      window.location.href = '/user/dashboard';
    }
    
    function createTicket() {
      // Redirect to create ticket page with pre-filled info
      window.location.href = `/user/tickets/create?category=<%= category %>&message=<%= encodeURIComponent(message) %>`;
    }
  </script>
  <style>
    .chat-waiting-container {
      max-width: 700px;
      margin: 60px auto;
      padding: 0 20px;
    }
    
    .waiting-card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      margin-bottom: 30px;
    }
    
    .waiting-header {
      background-color: var(--primary-color);
      color: white;
      padding: 20px;
      text-align: center;
    }
    
    .waiting-header .logo {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 15px;
    }
    
    .waiting-header .logo i {
      font-size: 24px;
      margin-right: 10px;
    }
    
    .waiting-header .logo span {
      font-size: 24px;
      font-weight: 600;
    }
    
    .waiting-header h2 {
      margin: 0;
      font-size: 22px;
    }
    
    .waiting-content {
      padding: 30px;
    }
    
    .waiting-animation {
      text-align: center;
      margin-bottom: 20px;
    }
    
    .spinner {
      display: inline-block;
      width: 60px;
      height: 60px;
      border: 5px solid rgba(0, 0, 0, 0.1);
      border-top-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .waiting-status {
      text-align: center;
      margin-bottom: 30px;
    }
    
    .waiting-status p {
      font-size: 18px;
      margin-bottom: 10px;
      color: var(--dark-color);
    }
    
    .waiting-time {
      display: inline-block;
      padding: 5px 15px;
      background-color: #f5f5f5;
      border-radius: 20px;
      font-weight: 500;
    }
    
    .request-details {
      background-color: #f9f9f9;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
    }
    
    .request-item {
      margin-bottom: 15px;
    }
    
    .request-item:last-child {
      margin-bottom: 0;
    }
    
    .request-label {
      display: block;
      font-weight: 600;
      margin-bottom: 5px;
      color: var(--gray-color);
    }
    
    .message-preview {
      display: block;
      font-style: italic;
      color: var(--dark-color);
      line-height: 1.4;
    }
    
    .waiting-actions {
      display: flex;
      justify-content: space-between;
      padding: 20px;
      border-top: 1px solid var(--border-color);
    }
    
    .support-info {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      padding: 25px;
      text-align: center;
    }
    
    .support-info h3 {
      margin-top: 0;
      color: var(--dark-color);
      margin-bottom: 15px;
    }
    
    .help-resources {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
    }
    
    .resource-card {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 15px;
      width: 120px;
      background-color: #f5f5f5;
      border-radius: 8px;
      color: var(--dark-color);
      transition: all 0.2s ease;
    }
    
    .resource-card:hover {
      background-color: #eaeaea;
      transform: translateY(-3px);
    }
    
    .resource-card i {
      font-size: 26px;
      margin-bottom: 10px;
      color: var(--primary-color);
    }
    
    .pulse-animation {
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(52, 152, 219, 0.4);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(52, 152, 219, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(52, 152, 219, 0);
      }
    }
    
    @media (max-width: 768px) {
      .help-resources {
        flex-direction: column;
        align-items: center;
      }
      
      .resource-card {
        width: 100%;
        max-width: 200px;
      }
    }
  </style>
</body>
</html>
