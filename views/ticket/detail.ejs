<%- contentFor('body') %>

<div class="dashboard-container">
  <!-- Left Navbar -->
  <nav class="navbar">
    <div class="navbar-header">
      <div class="logo">
        <i class="fas fa-headset"></i>
        <span class="logo-text">Helpdesk</span>
      </div>
      <div class="navbar-toggle">
        <i class="fas fa-bars"></i>
      </div>
    </div>
    
    <div class="navbar-items">
      <% if (user.role === 'user') { %>
        <!-- User Navigation -->
        <a href="/user/dashboard" class="navbar-item">
          <i class="fas fa-home"></i>
          <span>Dashboard</span>
        </a>
        <a href="/user/tickets" class="navbar-item active">
          <i class="fas fa-ticket-alt"></i>
          <span>My Tickets</span>
        </a>
        <a href="/user/messages" class="navbar-item">
          <i class="fas fa-comments"></i>
          <span>Messages</span>
        </a>
        <a href="#" class="navbar-item" data-panel="new-ticket-panel">
          <i class="fas fa-plus-circle"></i>
          <span>New Ticket</span>
        </a>
        <a href="/user/settings" class="navbar-item">
          <i class="fas fa-cog"></i>
          <span>Settings</span>
        </a>
      <% } else { %>
        <!-- Admin Navigation -->
        <a href="/admin/dashboard" class="navbar-item">
          <i class="fas fa-home"></i>
          <span>Dashboard</span>
        </a>
        <a href="/admin/tickets" class="navbar-item active">
          <i class="fas fa-ticket-alt"></i>
          <span>All Tickets</span>
        </a>
        <a href="/admin/statistics" class="navbar-item">
          <i class="fas fa-chart-bar"></i>
          <span>Statistics</span>
        </a>
        <% if (user.role === 'head_admin') { %>
          <a href="/admin/users" class="navbar-item">
            <i class="fas fa-users"></i>
            <span>Users</span>
          </a>
        <% } %>
        <a href="#" class="navbar-item" data-panel="settings-panel">
          <i class="fas fa-cog"></i>
          <span>Settings</span>
        </a>
      <% } %>
      
      <!-- Logout -->
      <a href="/auth/logout" class="navbar-item">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
      </a>
    </div>
  </nav>
  
  <!-- Main Content -->
  <div class="main-content ticket-detail-content">
    <div class="panel-header">
      <h2>
        Sak #<%= ticket._id.toString().slice(-6).toUpperCase() %>
        <div class="ticket-status-badge <%= ticket.status %>">
          <%= ticket.status === 'open' ? 'Åpen' : 
             ticket.status === 'in_progress' ? 'Under behandling' : 
             'Løst' %>
        </div>
      </h2>
      <div class="panel-actions">
        <a href="<%= user.role === 'user' ? '/user/tickets' : '/admin/tickets' %>" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i> Tilbake til saker
        </a>
      </div>
    </div>
    
    <!-- Ticket Information -->
    <div class="ticket-info-container">
      <div class="ticket-meta">
        <div class="ticket-meta-item">
          <span class="meta-label">Opprettet:</span>
          <span class="meta-value"><%= formatTime(ticket.createdAt) %></span>
        </div>
        <div class="ticket-meta-item">
          <span class="meta-label">Oppdatert:</span>
          <span class="meta-value"><%= formatTime(ticket.updatedAt) %></span>
        </div>
        <div class="ticket-meta-item">
          <span class="meta-label">Kategori:</span>
          <span class="meta-value category-<%= ticket.category %>">
            <%= ticket.category === 'technical' ? 'Teknisk' :
               ticket.category === 'account' ? 'Konto' :
               ticket.category === 'billing' ? 'Fakturering' :
               ticket.category === 'feature' ? 'Funksjonalitet' :
               'Annet' %>
          </span>
        </div>
        <div class="ticket-meta-item">
          <span class="meta-label">Prioritet:</span>
          <span class="meta-value priority-<%= ticket.priority %>">
            <%= ticket.priority === 'low' ? 'Lav' :
               ticket.priority === 'medium' ? 'Middels' :
               'Høy' %>
          </span>
        </div>
        <div class="ticket-meta-item">
          <span class="meta-label">Tildelt til:</span>
          <span class="meta-value">
            <% if (ticket.assignedTo) { %>
              <%= ticket.assignedTo.name %>
              <% if (user.role !== 'user' && ticket.assignedTo._id.toString() === user._id.toString()) { %>
                <span class="assigned-to-me">(Deg)</span>
              <% } %>
            <% } else { %>
              <span class="not-assigned">Ikke tildelt</span>
            <% } %>
          </span>
        </div>
      </div>
      
      <!-- Ticket Content -->
      <div class="ticket-content">
        <h3 class="ticket-title"><%= ticket.title %></h3>
        <div class="ticket-user">
          Opprettet av: <span class="user-name"><%= ticket.user.name %></span>
        </div>
        <div class="ticket-description">
          <%= ticket.description %>
        </div>
        
        <% if (ticket.attachments && ticket.attachments.length > 0) { %>
          <div class="ticket-attachments">
            <h4>Vedlegg:</h4>
            <div class="attachments-list">
              <% ticket.attachments.forEach(attachment => { %>
                <a href="/<%= attachment.path %>" target="_blank" class="attachment-item">
                  <% if (attachment.mimetype.startsWith('image/')) { %>
                    <div class="attachment-preview">
                      <img src="/<%= attachment.path %>" alt="<%= attachment.originalname %>">
                    </div>
                  <% } else { %>
                    <div class="attachment-icon">
                      <i class="<%= getFileIcon(attachment.mimetype) %>"></i>
                    </div>
                  <% } %>
                  <span class="attachment-name"><%= attachment.originalname %></span>
                </a>
              <% }); %>
            </div>
          </div>
        <% } %>
      </div>
    </div>
    
    <!-- Admin Actions -->
    <% if (user.role === 'admin' || user.role === 'head_admin') { %>
      <div class="admin-actions">
        <div class="action-section">
          <h4>Statusendring</h4>
          <div class="action-buttons">
            <button class="btn <%= ticket.status === 'open' ? 'btn-primary active' : 'btn-outline' %> status-btn" 
                    data-status="open" <%= ticket.status === 'open' ? 'disabled' : '' %>>
              <i class="fas fa-folder-open"></i> Åpen
            </button>
            <button class="btn <%= ticket.status === 'in_progress' ? 'btn-primary active' : 'btn-outline' %> status-btn" 
                    data-status="in_progress" <%= ticket.status === 'in_progress' ? 'disabled' : '' %>>
              <i class="fas fa-spinner"></i> Under behandling
            </button>
            <button class="btn <%= ticket.status === 'resolved' ? 'btn-primary active' : 'btn-outline' %> status-btn" 
                    data-status="resolved" <%= ticket.status === 'resolved' ? 'disabled' : '' %>>
              <i class="fas fa-check-circle"></i> Løst
            </button>
          </div>
        </div>
        
        <div class="action-section">
          <h4>Prioritet</h4>
          <div class="action-buttons">
            <button class="btn <%= ticket.priority === 'low' ? 'btn-primary active' : 'btn-outline' %> priority-btn" 
                    data-priority="low" <%= ticket.priority === 'low' ? 'disabled' : '' %>>
              <i class="fas fa-angle-down"></i> Lav
            </button>
            <button class="btn <%= ticket.priority === 'medium' ? 'btn-primary active' : 'btn-outline' %> priority-btn" 
                    data-priority="medium" <%= ticket.priority === 'medium' ? 'disabled' : '' %>>
              <i class="fas fa-equals"></i> Middels
            </button>
            <button class="btn <%= ticket.priority === 'high' ? 'btn-primary active' : 'btn-outline' %> priority-btn" 
                    data-priority="high" <%= ticket.priority === 'high' ? 'disabled' : '' %>>
              <i class="fas fa-angle-up"></i> Høy
            </button>
          </div>
        </div>
        
        <div class="action-section">
          <h4>Tildelingshandlinger</h4>
          <div class="action-buttons">
            <% if (!ticket.assignedTo || ticket.assignedTo._id.toString() !== user._id.toString()) { %>
              <button class="btn btn-success" id="assign-to-me-btn">
                <i class="fas fa-user-check"></i> Tildel til meg
              </button>
            <% } %>
            <button class="btn btn-primary" id="assign-ticket-btn">
              <i class="fas fa-user-friends"></i> Tildel til annen admin
            </button>
          </div>
        </div>
      </div>
    <% } %>
    
    <!-- Ticket Responses -->
    <div class="ticket-responses">
      <h3>Meldinger</h3>
      
      <div class="responses-container">
        <% if (messages && messages.length > 0) { %>
          <% messages.forEach(message => { %>
            <div class="response-item <%= message.sender._id.toString() === user._id.toString() ? 'my-response' : '' %>">
              <div class="response-avatar">
                <% if (message.isSystem) { %>
                  <i class="fas fa-cog"></i>
                <% } else { %>
                  <%= message.sender.name.charAt(0).toUpperCase() %>
                <% } %>
              </div>
              <div class="response-content">
                <div class="response-header">
                  <div class="response-info">
                    <span class="response-user">
                      <% if (message.isSystem) { %>
                        System
                      <% } else { %>
                        <%= message.sender.name %>
                        <% if (message.sender.role === 'admin' || message.sender.role === 'head_admin') { %>
                          <span class="user-tag admin-tag">Administrator</span>
                        <% } else { %>
                          <span class="user-tag">Bruker</span>
                        <% } %>
                      <% } %>
                    </span>
                    <span class="response-time"><%= formatTime(message.createdAt) %></span>
                  </div>
                </div>
                <div class="response-message">
                  <%= message.content %>
                </div>
                <% if (message.attachments && message.attachments.length > 0) { %>
                  <div class="response-attachments">
                    <% message.attachments.forEach(attachment => { %>
                      <a href="/<%= attachment.path %>" target="_blank" class="attachment-thumbnail">
                        <% if (attachment.mimetype.startsWith('image/')) { %>
                          <img src="/<%= attachment.path %>" alt="<%= attachment.originalname %>">
                        <% } else { %>
                          <div class="file-thumbnail">
                            <i class="<%= getFileIcon(attachment.mimetype) %>"></i>
                            <span><%= attachment.originalname %></span>
                          </div>
                        <% } %>
                      </a>
                    <% }); %>
                  </div>
                <% } %>
              </div>
            </div>
          <% }); %>
        <% } else { %>
          <div class="no-responses">
            <p>Ingen meldinger ennå. Skriv under for å legge til den første meldingen.</p>
          </div>
        <% } %>
      </div>
      
      <!-- New Response Form -->
      <div class="new-response-form">
        <form id="response-form" action="/tickets/<%= ticket._id %>/respond" method="POST" enctype="multipart/form-data">
          <div class="form-group">
            <label for="response-message">Ditt svar</label>
            <textarea id="response-message" name="message" rows="4" required></textarea>
          </div>
          <div class="form-group">
            <label for="attachments">Legg til vedlegg (valgfritt)</label>
            <div class="file-input-wrapper">
              <input type="file" id="attachments" name="attachments" multiple>
              <div class="file-input-text">
                <i class="fas fa-paperclip"></i>
                <span>Dra filer hit eller klikk for å laste opp</span>
              </div>
            </div>
            <div class="attachments-preview" id="attachments-preview"></div>
          </div>
          <button type="submit" class="btn btn-primary">Send svar</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Assignment Modal -->
<div id="assignment-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Tildel sak til administrator</h2>
    <div class="admins-list">
      <% admins.forEach(admin => { %>
        <div class="admin-item <%= ticket.assignedTo && ticket.assignedTo._id.toString() === admin._id.toString() ? 'active' : '' %>">
          <div class="admin-info">
            <div class="admin-avatar"><%= admin.name.charAt(0).toUpperCase() %></div>
            <div class="admin-details">
              <span class="admin-name"><%= admin.name %></span>
              <span class="admin-status status-<%= admin.status || 'offline' %>">
                <%= admin.status === 'available' ? 'Tilgjengelig' : 
                   admin.status === 'working' ? 'Opptatt' : 
                   'Frakoblet' %>
              </span>
            </div>
          </div>
          <button class="btn btn-sm assign-btn" data-admin-id="<%= admin._id %>" 
                  <%= ticket.assignedTo && ticket.assignedTo._id.toString() === admin._id.toString() ? 'disabled' : '' %>>
            <%= ticket.assignedTo && ticket.assignedTo._id.toString() === admin._id.toString() ? 'Tildelt' : 'Tildel' %>
          </button>
        </div>
      <% }); %>
    </div>
  </div>
</div>

<% contentFor('script') %>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/dashboard.js"></script>
<script>
  let socket;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize socket connection
    initSocket();
    
    // Scroll to bottom of messages
    scrollToBottom();
    
    // Admin controls event listeners
    if (document.getElementById('update-status-btn')) {
      document.getElementById('update-status-btn').addEventListener('click', updateTicketStatus);
    }
    
    if (document.getElementById('update-priority-btn')) {
      document.getElementById('update-priority-btn').addEventListener('click', updateTicketPriority);
    }
    
    if (document.getElementById('assign-ticket-btn')) {
      document.getElementById('assign-ticket-btn').addEventListener('click', assignTicket);
    }
    
    if (document.getElementById('add-documentation-btn')) {
      document.getElementById('add-documentation-btn').addEventListener('click', showDocumentationModal);
    }
    
    // Modal close button
    const closeButtons = document.querySelectorAll('.modal .close');
    closeButtons.forEach(button => {
      button.addEventListener('click', function() {
        this.closest('.modal').style.display = 'none';
      });
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
      }
    });
    
    // Documentation form submission
    const documentationForm = document.getElementById('documentation-form');
    if (documentationForm) {
      documentationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        addDocumentation();
      });
    }
  });
  
  function initSocket() {
    socket = io();
    
    socket.on('connect', function() {
      console.log('Connected to socket server');
    });
    
    socket.on('connect_error', function(error) {
      console.error('Connection error:', error);
    });
    
    // Listen for new messages for this ticket
    socket.on('new-message', function(data) {
      if (data.ticket === '<%= ticket._id %>') {
        appendMessage(data);
        scrollToBottom();
      }
    });
    
    // Listen for ticket status updates
    socket.on('ticket-status-updated', function(data) {
      if (data.ticketId === '<%= ticket._id %>') {
        window.location.reload();
      }
    });
  }
  
  function scrollToBottom() {
    const messageContainer = document.getElementById('ticket-messages');
    if (messageContainer) {
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }
  }
  
  function appendMessage(data) {
    const messageContainer = document.getElementById('ticket-messages');
    const isCurrentUser = data.sender.id === '<%= user._id %>';
    
    if (data.isSystem) {
      const systemMessageHTML = `
        <div class="message">
          <div class="system-message">
            <div class="system-icon">
              <i class="fas fa-info-circle"></i>
            </div>
            <div class="system-content">
              ${data.message}
            </div>
            <div class="message-time">
              ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        </div>
      `;
      
      messageContainer.innerHTML += systemMessageHTML;
    } else {
      const messageHTML = `
        <div class="message ${isCurrentUser ? 'outgoing' : 'incoming'}">
          <div class="message-avatar">
            ${isCurrentUser ? '<%= user.name.charAt(0).toUpperCase() %>' : data.sender.name.charAt(0).toUpperCase()}
          </div>
          <div class="message-content">
            <div class="message-sender">
              ${data.sender.name}
              ${data.sender.role === 'admin' || data.sender.role === 'head_admin' ? 
                '<span class="badge admin-badge">Admin</span>' : ''}
            </div>
            <div class="message-bubble">
              ${data.message}
            </div>
            <div class="message-time">
              ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        </div>
      `;
      
      messageContainer.innerHTML += messageHTML;
    }
  }
  
  function sendMessage() {
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    const fileInput = document.getElementById('message-file-upload');
    
    // Check if there's a message or files
    if (!message && fileInput.files.length === 0) return;
    
    // Create FormData to handle files
    const formData = new FormData();
    formData.append('message', message);
    formData.append('ticketId', '<%= ticket._id %>');
    
    // Add files if any
    if (fileInput.files.length > 0) {
      for (let i = 0; i < fileInput.files.length; i++) {
        formData.append('attachments', fileInput.files[i]);
      }
    }
    
    fetch('/chat/send', {
      method: 'POST',
      body: formData
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Clear input
          messageInput.value = '';
          fileInput.value = '';
          clearMessageAttachmentsPreviews();
          
          // Add message to UI (will be handled by socket event)
        } else {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          } else {
            alert('Failed to send message: ' + data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error sending message:', error);
        if (window.notifications) {
          window.notifications.error('An error occurred', 'Error');
        } else {
          alert('An error occurred while sending the message');
        }
      });
  }
  
  // File upload preview for messages
  document.getElementById('message-file-upload').addEventListener('change', function(e) {
    const files = e.target.files;
    const previewContainer = document.getElementById('message-attachments-preview');
    
    clearMessageAttachmentsPreviews();
    
    if (files.length > 0) {
      previewContainer.style.display = 'flex';
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const previewItem = document.createElement('div');
        previewItem.className = 'attachment-preview';
        
        if (file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.src = URL.createObjectURL(file);
          previewItem.appendChild(img);
        } else {
          const icon = document.createElement('i');
          icon.className = getFileIcon(file.type);
          previewItem.appendChild(icon);
        }
        
        const fileName = document.createElement('span');
        fileName.textContent = file.name.length > 15 ? file.name.substring(0, 12) + '...' : file.name;
        fileName.className = 'file-name';
        previewItem.appendChild(fileName);
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-attachment';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.setAttribute('data-index', i);
        removeBtn.onclick = function() {
          // Create a new FileList without this file
          const dt = new DataTransfer();
          const input = document.getElementById('message-file-upload');
          
          for (let j = 0; j < input.files.length; j++) {
            if (j !== parseInt(this.getAttribute('data-index'))) {
              dt.items.add(input.files[j]);
            }
          }
          
          input.files = dt.files;
          
          // Update preview
          if (input.files.length === 0) {
            clearMessageAttachmentsPreviews();
          } else {
            this.parentElement.remove();
          }
        };
        
        previewItem.appendChild(removeBtn);
        previewContainer.appendChild(previewItem);
      }
    }
  });
  
  function clearMessageAttachmentsPreviews() {
    const previewContainer = document.getElementById('message-attachments-preview');
    previewContainer.innerHTML = '';
    previewContainer.style.display = 'none';
  }
  
  // Handle attachments in ticket
  document.getElementById('ticket-new-attachments').addEventListener('change', function() {
    const previewContainer = document.getElementById('new-attachments-preview');
    previewContainer.innerHTML = '';
    
    if (this.files.length > 0) {
      previewContainer.style.display = 'flex';
      document.getElementById('upload-attachments-btn').style.display = 'inline-block';
      
      for (let i = 0; i < this.files.length; i++) {
        const file = this.files[i];
        const previewItem = document.createElement('div');
        previewItem.className = 'attachment-preview-item';
        
        // Add icon or image preview
        if (file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.src = URL.createObjectURL(file);
          img.className = 'attachment-thumbnail';
          previewItem.appendChild(img);
        } else {
          const icon = document.createElement('i');
          icon.className = getFileIcon(file.type);
          previewItem.appendChild(icon);
        }
        
        // Add file name
        const fileName = document.createElement('span');
        fileName.className = 'attachment-filename';
        fileName.textContent = file.name.length > 20 ? file.name.substring(0, 17) + '...' : file.name;
        previewItem.appendChild(fileName);
        
        // Add remove button
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'attachment-remove';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.dataset.index = i;
        
        removeBtn.addEventListener('click', function() {
          // Create a new FileList without this file
          const dt = new DataTransfer();
          const input = document.getElementById('ticket-new-attachments');
          
          for (let j = 0; j < input.files.length; j++) {
            if (j !== parseInt(this.dataset.index)) {
              dt.items.add(input.files[j]);
            }
          }
          
          input.files = dt.files;
          
          // Update preview
          if (input.files.length === 0) {
            previewContainer.innerHTML = '';
            previewContainer.style.display = 'none';
            document.getElementById('upload-attachments-btn').style.display = 'none';
          } else {
            this.parentElement.remove();
            
            // Update indices for remaining remove buttons
            const remainingButtons = previewContainer.querySelectorAll('.attachment-remove');
            remainingButtons.forEach((btn, idx) => {
              btn.dataset.index = idx;
            });
          }
        });
        
        previewItem.appendChild(removeBtn);
        previewContainer.appendChild(previewItem);
      }
    } else {
      previewContainer.style.display = 'none';
      document.getElementById('upload-attachments-btn').style.display = 'none';
    }
  });
  
  // Upload new attachments to ticket
  document.getElementById('add-attachment-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const fileInput = document.getElementById('ticket-new-attachments');
    if (fileInput.files.length === 0) return;
    
    const formData = new FormData();
    
    for (let i = 0; i < fileInput.files.length; i++) {
      formData.append('attachments', fileInput.files[i]);
    }
    
    // Show loading state
    const uploadBtn = document.getElementById('upload-attachments-btn');
    const originalBtnText = uploadBtn.innerHTML;
    uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
    uploadBtn.disabled = true;
    
    fetch('/tickets/<%= ticket._id %>/attachments', {
      method: 'POST',
      body: formData
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success('Attachments uploaded successfully');
          }
          
          // Reset form
          fileInput.value = '';
          document.getElementById('new-attachments-preview').innerHTML = '';
          document.getElementById('new-attachments-preview').style.display = 'none';
          uploadBtn.style.display = 'none';
          
          // Refresh page to show new attachments
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          uploadBtn.innerHTML = originalBtnText;
          uploadBtn.disabled = false;
          
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          } else {
            alert('Failed to upload attachments: ' + data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error uploading attachments:', error);
        uploadBtn.innerHTML = originalBtnText;
        uploadBtn.disabled = false;
        
        if (window.notifications) {
          window.notifications.error('An error occurred during upload', 'Error');
        } else {
          alert('An error occurred while uploading attachments');
        }
      });
  });
  
  // Delete attachment
  const deleteButtons = document.querySelectorAll('.delete-attachment');
  deleteButtons.forEach(button => {
    button.addEventListener('click', function() {
      if (confirm('Are you sure you want to delete this attachment?')) {
        const attachmentId = this.getAttribute('data-id');
        
        fetch(`/tickets/<%= ticket._id %>/attachments/${attachmentId}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              if (window.notifications) {
                window.notifications.success('Attachment deleted successfully');
              }
              
              // Remove attachment from UI
              this.closest('.attachment-item').remove();
              
              // Check if there are no more attachments
              const attachmentsList = document.querySelector('.attachments-list');
              if (!attachmentsList.children.length) {
                attachmentsList.innerHTML = '<div class="empty-attachments"><p>No attachments for this ticket.</p></div>';
              }
            } else {
              if (window.notifications) {
                window.notifications.error(data.message, 'Error');
              } else {
                alert('Failed to delete attachment: ' + data.message);
              }
            }
          })
          .catch(error => {
            console.error('Error deleting attachment:', error);
            if (window.notifications) {
              window.notifications.error('An error occurred', 'Error');
            } else {
              alert('An error occurred while deleting the attachment');
            }
          });
      }
    });
  });
  
  function appendMessage(data) {
    const messageContainer = document.getElementById('ticket-messages');
    const isCurrentUser = data.sender.id === '<%= user._id %>';
    
    if (data.isSystem) {
      const systemMessageHTML = `
        <div class="message">
          <div class="system-message">
            <div class="system-icon">
              <i class="fas fa-info-circle"></i>
            </div>
            <div class="system-content">
              ${data.message}
            </div>
            <div class="message-time">
              ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        </div>
      `;
      
      messageContainer.innerHTML += systemMessageHTML;
    } else {
      let attachmentsHTML = '';
      if (data.attachments && data.attachments.length > 0) {
        attachmentsHTML = '<div class="message-attachments">';
        data.attachments.forEach(attachment => {
          if (isImageFile(attachment.mimetype)) {
            attachmentsHTML += `
              <div class="attachment-item image">
                <a href="/${attachment.path}" target="_blank">
                  <img src="/${attachment.path}" alt="${attachment.originalname}">
                </a>
              </div>
            `;
          } else {
            attachmentsHTML += `
              <div class="attachment-item file">
                <a href="/${attachment.path}" target="_blank" class="file-attachment">
                  <i class="${getFileIcon(attachment.mimetype)}"></i>
                  <span>${attachment.originalname}</span>
                </a>
              </div>
            `;
          }
        });
        attachmentsHTML += '</div>';
      }
      
      const messageHTML = `
        <div class="message ${isCurrentUser ? 'outgoing' : 'incoming'}">
          <div class="message-avatar">
            ${isCurrentUser ? '<%= user.name.charAt(0).toUpperCase() %>' : data.sender.name.charAt(0).toUpperCase()}
          </div>
          <div class="message-content">
            <div class="message-sender">
              ${data.sender.name}
              ${data.sender.role === 'admin' || data.sender.role === 'head_admin' ? 
                '<span class="badge admin-badge">Admin</span>' : ''}
            </div>
            <div class="message-bubble">
              ${data.message}
            </div>
            ${attachmentsHTML}
            <div class="message-time">
              ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        </div>
      `;
      
      messageContainer.innerHTML += messageHTML;
    }
  }
  
  function getFileIcon(mimetype) {
    if (mimetype.startsWith('image/')) return 'fas fa-file-image';
    if (mimetype === 'application/pdf') return 'fas fa-file-pdf';
    if (mimetype.includes('word')) return 'fas fa-file-word';
    if (mimetype.includes('excel') || mimetype.includes('spreadsheet')) return 'fas fa-file-excel';
    if (mimetype.includes('powerpoint') || mimetype.includes('presentation')) return 'fas fa-file-powerpoint';
    if (mimetype.includes('text/')) return 'fas fa-file-alt';
    return 'fas fa-file';
  }
  
  function isImageFile(mimetype) {
    return mimetype && mimetype.startsWith('image/');
  }
  
  // Helper for EJS template
  function getFileIconClass(mimetype) {
    return getFileIcon(mimetype);
  }
  
  function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
    else return (bytes / 1048576).toFixed(1) + ' MB';
  }
  
  function updateTicketStatus() {
    const status = document.getElementById('status-select').value;
    
    fetch('/tickets/<%= ticket._id %>/status', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ status })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success(`Ticket status updated to ${status.replace('_', ' ')}`);
          }
          
          // Reload page to reflect changes
          window.location.reload();
        } else {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          } else {
            alert('Failed to update status: ' + data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error updating status:', error);
        if (window.notifications) {
          window.notifications.error('An error occurred', 'Error');
        } else {
          alert('An error occurred while updating the status');
        }
      });
  }
  
  function updateTicketPriority() {
    const priority = document.getElementById('priority-select').value;
    
    fetch('/tickets/<%= ticket._id %>/priority', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ priority })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success(`Ticket priority updated to ${priority}`);
          }
          
          // Reload page to reflect changes
          window.location.reload();
        } else {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          } else {
            alert('Failed to update priority: ' + data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error updating priority:', error);
        if (window.notifications) {
          window.notifications.error('An error occurred', 'Error');
        } else {
          alert('An error occurred while updating the priority');
        }
      });
  }
  
  function assignTicket() {
    const adminId = document.getElementById('assign-select').value;
    
    fetch('/tickets/<%= ticket._id %>/assign', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ adminId })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success(adminId ? 'Ticket assigned successfully' : 'Ticket unassigned');
          }
          
          // Reload page to reflect changes
          window.location.reload();
        } else {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          } else {
            alert('Failed to assign ticket: ' + data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error assigning ticket:', error);
        if (window.notifications) {
          window.notifications.error('An error occurred', 'Error');
        } else {
          alert('An error occurred while assigning the ticket');
        }
      });
  }
  
  function showDocumentationModal() {
    document.getElementById('documentation-modal').style.display = 'block';
  }
  
  function addDocumentation() {
    const problem = document.getElementById('problem').value;
    const solution = document.getElementById('solution').value;
    
    fetch('/tickets/<%= ticket._id %>/documentation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ problem, solution })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success('Documentation added successfully');
          }
          
          // Close modal
          document.getElementById('documentation-modal').style.display = 'none';
          
          // Reload page to reflect changes
          window.location.reload();
        } else {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          } else {
            alert('Failed to add documentation: ' + data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error adding documentation:', error);
        if (window.notifications) {
          window.notifications.error('An error occurred', 'Error');
        } else {
          alert('An error occurred while adding documentation');
        }
      });
  }
</script>
