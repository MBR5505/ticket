<%- contentFor('body') %>

<div class="dashboard-container">
  <!-- Left Navbar -->
  <nav class="navbar">
    <div class="navbar-header">
      <div class="logo">
        <i class="fas fa-headset"></i>
        <span class="logo-text">Helpdesk</span>
      </div>
      <div class="navbar-toggle">
        <i class="fas fa-bars"></i>
      </div>
    </div>
    
    <div class="navbar-items">
      <!-- Admin Navigation -->
      <a href="/admin/dashboard" class="navbar-item">
        <i class="fas fa-home"></i>
        <span>Dashboard</span>
      </a>
      <a href="/admin/tickets" class="navbar-item active">
        <i class="fas fa-ticket-alt"></i>
        <span>All Tickets</span>
      </a>
      <a href="/admin/statistics" class="navbar-item">
        <i class="fas fa-chart-bar"></i>
        <span>Statistics</span>
      </a>
      <% if (user.role === 'head_admin') { %>
        <a href="#" class="navbar-item" data-panel="notifications-panel">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/admin/users" class="navbar-item">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      <% } %>
      <a href="#" class="navbar-item" data-panel="settings-panel">
        <i class="fas fa-cog"></i>
        <span>Settings</span>
      </a>
      
      <!-- Logout -->
      <a href="/auth/logout" class="navbar-item">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
      </a>
    </div>
  </nav>
  
  <!-- Main Content -->
  <div class="main-content">
    <!-- Left Panel (Ticket Filters) -->
    <div class="panel left-panel">
      <div class="panel-header">
        <h2>Saksfiltre</h2>
      </div>
      <div class="panel-content">
        <div class="filter-section">
          <h3>Søk</h3>
          <div class="search-box">
            <input type="text" id="ticket-search" placeholder="Søk etter saker...">
            <button id="search-btn"><i class="fas fa-search"></i></button>
          </div>
        </div>
        
        <div class="filter-section">
          <h3>Status</h3>
          <div class="filter-options">
            <label class="checkbox-container">
              <input type="checkbox" name="status" value="all" checked>
              <span class="checkmark"></span>
              Alle
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="status" value="open" checked>
              <span class="checkmark"></span>
              Åpen
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="status" value="in_progress" checked>
              <span class="checkmark"></span>
              Under behandling
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="status" value="resolved" checked>
              <span class="checkmark"></span>
              Løst
            </label>
          </div>
        </div>
        
        <div class="filter-section">
          <h3>Prioritet</h3>
          <div class="filter-options">
            <label class="checkbox-container">
              <input type="checkbox" name="priority" value="all" checked>
              <span class="checkmark"></span>
              Alle
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="priority" value="low" checked>
              <span class="checkmark"></span>
              Lav
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="priority" value="medium" checked>
              <span class="checkmark"></span>
              Middels
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="priority" value="high" checked>
              <span class="checkmark"></span>
              Høy
            </label>
          </div>
        </div>
        
        <div class="filter-section">
          <h3>Kategori</h3>
          <div class="filter-options">
            <label class="checkbox-container">
              <input type="checkbox" name="category" value="all" checked>
              <span class="checkmark"></span>
              Alle
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="category" value="technical" checked>
              <span class="checkmark"></span>
              Teknisk
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="category" value="account" checked>
              <span class="checkmark"></span>
              Konto
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="category" value="billing" checked>
              <span class="checkmark"></span>
              Fakturering
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="category" value="feature" checked>
              <span class="checkmark"></span>
              Funksjonalitet
            </label>
            <label class="checkbox-container">
              <input type="checkbox" name="category" value="other" checked>
              <span class="checkmark"></span>
              Annet
            </label>
          </div>
        </div>
        
        <div class="filter-section">
          <h3>Tidsperiode</h3>
          <div class="filter-options">
            <label class="radio-container">
              <input type="radio" name="timeframe" value="all" checked>
              <span class="radio-mark"></span>
              Alle datoer
            </label>
            <label class="radio-container">
              <input type="radio" name="timeframe" value="today">
              <span class="radio-mark"></span>
              I dag
            </label>
            <label class="radio-container">
              <input type="radio" name="timeframe" value="week">
              <span class="radio-mark"></span>
              Denne uken
            </label>
            <label class="radio-container">
              <input type="radio" name="timeframe" value="month">
              <span class="radio-mark"></span>
              Denne måneden
            </label>
          </div>
        </div>
        
        <div class="filter-actions">
          <button id="apply-filters" class="btn btn-primary">Bruk filtre</button>
          <button id="reset-filters" class="btn btn-secondary">Tilbakestill</button>
        </div>
      </div>
    </div>
    
    <!-- Right Panel (Tickets List) -->
    <div class="panel right-panel">
      <div class="panel-header">
        <h2>Alle saker</h2>
        <div class="panel-actions">
          <select id="sort-tickets">
            <option value="created_desc">Nyeste først</option>
            <option value="created_asc">Eldste først</option>
            <option value="priority_desc">Høyeste prioritet først</option>
            <option value="priority_asc">Laveste prioritet først</option>
          </select>
        </div>
      </div>
      <div class="panel-content">
        <div class="tickets-container">
          <% if (tickets && tickets.length > 0) { %>
            <div class="tickets-table-container">
              <table class="tickets-table">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Tittel</th>
                    <th>Bruker</th>
                    <th>Status</th>
                    <th>Prioritet</th>
                    <th>Kategori</th>
                    <th>Opprettet</th>
                    <th>Tildelt til</th>
                    <th>Handlinger</th>
                  </tr>
                </thead>
                <tbody>
                  <% tickets.forEach(ticket => { %>
                    <tr class="ticket-row <%= ticket.status %>">
                      <td><%= ticket._id.toString().slice(-6).toUpperCase() %></td>
                      <td><%= ticket.title %></td>
                      <td><%= ticket.user.name %></td>
                      <td>
                        <span class="status-badge <%= ticket.status %>">
                          <%= ticket.status === 'open' ? 'Åpen' : 
                             ticket.status === 'in_progress' ? 'Under behandling' : 
                             'Løst' %>
                        </span>
                      </td>
                      <td>
                        <span class="priority-badge <%= ticket.priority %>">
                          <%= ticket.priority === 'low' ? 'Lav' : 
                             ticket.priority === 'medium' ? 'Middels' : 
                             'Høy' %>
                        </span>
                      </td>
                      <td><%= ticket.category.charAt(0).toUpperCase() + ticket.category.slice(1) %></td>
                      <td><%= formatTime(ticket.createdAt) %></td>
                      <td>
                        <% if (ticket.assignedTo) { %>
                          <%= ticket.assignedTo.name %>
                        <% } else { %>
                          <span class="unassigned">Ikke tildelt</span>
                        <% } %>
                      </td>
                      <td>
                        <div class="ticket-actions">
                          <a href="/tickets/admin/<%= ticket._id %>" class="btn btn-sm btn-primary">
                            <i class="fas fa-eye"></i> Vis
                          </a>
                          <% if (!ticket.assignedTo) { %>
                            <button class="btn btn-sm btn-success assign-to-me" data-id="<%= ticket._id %>">
                              <i class="fas fa-user-check"></i> Tildel til meg
                            </button>
                          <% } %>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
            
            <!-- Pagination -->
            <div class="pagination">
              <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>" class="pagination-item">
                  <i class="fas fa-chevron-left"></i> Forrige
                </a>
              <% } %>
              
              <% for (let i = 1; i <= totalPages; i++) { %>
                <a href="?page=<%= i %>" class="pagination-item <%= i === currentPage ? 'active' : '' %>">
                  <%= i %>
                </a>
              <% } %>
              
              <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %>" class="pagination-item">
                  Neste <i class="fas fa-chevron-right"></i>
                </a>
              <% } %>
            </div>
          <% } else { %>
            <div class="empty-state">
              <div class="empty-icon">
                <i class="fas fa-ticket-alt"></i>
              </div>
              <h3>Ingen saker funnet</h3>
              <p>Det er ingen saker som matcher søkekriteriene dine.</p>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Assign Ticket Modal -->
<div id="assign-ticket-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Tildel sak</h2>
    <form id="assign-ticket-form">
      <input type="hidden" id="ticket-id">
      <div class="form-group">
        <label for="assign-to">Tildel til</label>
        <select id="assign-to" name="assignTo" required>
          <option value="">Velg en administrator</option>
          <% admins.forEach(admin => { %>
            <option value="<%= admin._id %>"><%= admin.name %></option>
          <% }); %>
        </select>
      </div>
      <div class="form-group">
        <label for="assign-note">Notat (valgfritt)</label>
        <textarea id="assign-note" name="note" rows="3" placeholder="Legg til en kommentar om tildelingen..."></textarea>
      </div>
      <button type="submit" class="btn btn-primary btn-block">Tildel sak</button>
    </form>
  </div>
</div>

<% contentFor('script') %>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/dashboard.js"></script>
<script>
  let currentTicketId = null;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize socket
    if (typeof io !== 'undefined') {
      initializeSocket();
    }
    
    // Check if there's a ticket ID in the URL
    const urlParams = new URLSearchParams(window.location.search);
    const ticketId = urlParams.get('id');
    if (ticketId) {
      loadTicketDetails(ticketId);
      
      // Highlight the selected ticket
      const ticketCard = document.querySelector(`.ticket-card[data-id="${ticketId}"]`);
      if (ticketCard) {
        ticketCard.classList.add('selected');
      }
    }
  });
  
  // Load ticket details
  function loadTicketDetails(ticketId) {
    currentTicketId = ticketId;
    
    // Show loading state
    document.getElementById('empty-ticket-details').style.display = 'none';
    document.getElementById('ticket-details-container').style.display = 'block';
    document.getElementById('ticket-details-container').innerHTML = `
      <div class="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Loading ticket details...</p>
      </div>
    `;
    
    // Update URL without refreshing
    const url = new URL(window.location);
    url.searchParams.set('id', ticketId);
    window.history.pushState({}, '', url);
    
    // Highlight selected ticket
    document.querySelectorAll('.ticket-card').forEach(card => {
      card.classList.remove('selected');
    });
    document.querySelector(`.ticket-card[data-id="${ticketId}"]`).classList.add('selected');
    
    // Fetch ticket details
    fetch(`/tickets/admin/${ticketId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to load ticket details');
        }
        return response.text();
      })
      .then(html => {
        document.getElementById('ticket-details-container').innerHTML = html;
        
        // Initialize ticket action buttons
        initTicketActions();
      })
      .catch(error => {
        console.error('Error loading ticket details:', error);
        document.getElementById('ticket-details-container').innerHTML = `
          <div class="error-message">
            <i class="fas fa-exclamation-circle"></i>
            <p>Error loading ticket details. Please try again.</p>
          </div>
        `;
      });
  }
  
  // Initialize ticket action buttons
  function initTicketActions() {
    // Status update button
    const statusBtns = document.querySelectorAll('.status-action');
    statusBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const status = this.getAttribute('data-status');
        updateTicketStatus(currentTicketId, status);
      });
    });
    
    // Priority update button
    const priorityBtns = document.querySelectorAll('.priority-action');
    priorityBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const priority = this.getAttribute('data-priority');
        updateTicketPriority(currentTicketId, priority);
      });
    });
    
    // Assignment button
    const assignBtn = document.getElementById('assign-ticket-btn');
    if (assignBtn) {
      assignBtn.addEventListener('click', function() {
        showAssignmentModal(currentTicketId);
      });
    }
    
    // Close ticket button
    const closeBtn = document.getElementById('close-ticket-btn');
    if (closeBtn) {
      closeBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to close this ticket?')) {
          updateTicketStatus(currentTicketId, 'resolved');
        }
      });
    }
    
    // Reopen ticket button
    const reopenBtn = document.getElementById('reopen-ticket-btn');
    if (reopenBtn) {
      reopenBtn.addEventListener('click', function() {
        updateTicketStatus(currentTicketId, 'open');
      });
    }
  }
  
  // Show assignment modal
  function showAssignmentModal(ticketId) {
    const modal = document.getElementById('assignment-modal');
    modal.style.display = 'block';
    
    // Get current assigned admin if any
    const ticketCard = document.querySelector(`.ticket-card[data-id="${ticketId}"]`);
    const currentAssignee = ticketCard.querySelector('.ticket-assignment .assigned-to-me');
    
    // Get assignment form
    const form = document.getElementById('assignment-form');
    
    // Pre-select current admin if assigned to current user
    if (currentAssignee) {
      const adminSelect = document.getElementById('assign-admin-select');
      const currentUserOption = adminSelect.querySelector(`option[value="${'<%= user._id %>'}"]`);
      if (currentUserOption) {
        currentUserOption.selected = true;
      }
    }
    
    // Handle form submission
    form.onsubmit = function(e) {
      e.preventDefault();
      const adminId = document.getElementById('assign-admin-select').value;
      assignTicket(ticketId, adminId);
      modal.style.display = 'none';
    };
    
    // Close modal when clicking the X
    document.querySelector('#assignment-modal .close').onclick = function() {
      modal.style.display = 'none';
    };
    
    // Close modal when clicking outside
    window.onclick = function(event) {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    };
  }
  
  // Assign ticket to admin
  function assignTicket(ticketId, adminId) {
    fetch(`/tickets/${ticketId}/assign`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ adminId })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success(data.message);
          }
          
          // Reload ticket details
          loadTicketDetails(ticketId);
          
          // Update assignment info in the ticket card
          updateTicketCardAssignment(ticketId, adminId);
        } else {
          if (window.notifications) {
            window.notifications.error(data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error assigning ticket:', error);
        if (window.notifications) {
          window.notifications.error('Failed to assign ticket');
        }
      });
  }
  
  // Update assignment info in ticket card
  function updateTicketCardAssignment(ticketId, adminId) {
    const ticketCard = document.querySelector(`.ticket-card[data-id="${ticketId}"]`);
    if (!ticketCard) return;
    
    const assignmentSpan = ticketCard.querySelector('.ticket-assignment');
    
    if (adminId) {
      // Get admin name from select option
      const adminSelect = document.getElementById('assign-admin-select');
      const selectedOption = adminSelect.options[adminSelect.selectedIndex];
      const adminName = selectedOption.textContent.replace('(You)', '').trim();
      
      assignmentSpan.innerHTML = `
        <i class="fas fa-user-check"></i> 
        ${adminName}
        ${adminId === '<%= user._id %>' ? '<span class="assigned-to-me">(You)</span>' : ''}
      `;
      
      // Update status if open
      const statusSpan = ticketCard.querySelector('.ticket-status');
      if (statusSpan.classList.contains('open')) {
        statusSpan.classList.remove('open');
        statusSpan.classList.add('in_progress');
        statusSpan.textContent = 'In Progress';
      }
    } else {
      assignmentSpan.innerHTML = `
        <i class="fas fa-user-check"></i> 
        <span class="unassigned">Unassigned</span>
      `;
    }
  }
  
  // Update ticket status
  function updateTicketStatus(ticketId, status) {
    fetch(`/tickets/${ticketId}/status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ status })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success(data.message);
          }
          
          // Reload ticket details
          loadTicketDetails(ticketId);
          
          // Update status info in the ticket card
          updateTicketCardStatus(ticketId, status);
        } else {
          if (window.notifications) {
            window.notifications.error(data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error updating ticket status:', error);
        if (window.notifications) {
          window.notifications.error('Failed to update ticket status');
        }
      });
  }
  
  // Update ticket priority
  function updateTicketPriority(ticketId, priority) {
    fetch(`/tickets/${ticketId}/priority`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ priority })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success(data.message);
          }
          
          // Reload ticket details
          loadTicketDetails(ticketId);
          
          // Update priority info in the ticket card
          updateTicketCardPriority(ticketId, priority);
        } else {
          if (window.notifications) {
            window.notifications.error(data.message);
          }
        }
      })
      .catch(error => {
        console.error('Error updating ticket priority:', error);
        if (window.notifications) {
          window.notifications.error('Failed to update ticket priority');
        }
      });
  }
  
  // Update ticket card status
  function updateTicketCardStatus(ticketId, status) {
    const ticketCard = document.querySelector(`.ticket-card[data-id="${ticketId}"]`);
    if (!ticketCard) return;
    
    const statusSpan = ticketCard.querySelector('.ticket-status');
    
    // Remove existing status classes
    statusSpan.classList.remove('open', 'in_progress', 'resolved');
    
    // Add new status class
    statusSpan.classList.add(status);
    
    // Update text
    statusSpan.textContent = status === 'open' ? 'Open' : 
                            status === 'in_progress' ? 'In Progress' : 
                            'Resolved';
  }
  
  // Update ticket card priority
  function updateTicketCardPriority(ticketId, priority) {
    const ticketCard = document.querySelector(`.ticket-card[data-id="${ticketId}"]`);
    if (!ticketCard) return;
    
    const prioritySpan = ticketCard.querySelector('.ticket-priority');
    
    // Remove existing priority classes
    prioritySpan.classList.remove('priority-low', 'priority-medium', 'priority-high');
    
    // Add new priority class
    prioritySpan.classList.add(`priority-${priority}`);
    
    // Update text
    prioritySpan.textContent = priority.charAt(0).toUpperCase() + priority.slice(1);
  }
  
  // Handle ticket updates from socket
  function handleTicketStatusUpdate(data) {
    if (data.ticketId === currentTicketId) {
      // Reload ticket details if currently viewing
      loadTicketDetails(data.ticketId);
    }
    
    // Update ticket card status
    const ticketCard = document.querySelector(`.ticket-card[data-id="${data.ticketId}"]`);
    if (ticketCard) {
      const statusSpan = ticketCard.querySelector('.ticket-status');
      
      // Remove existing status classes
      statusSpan.classList.remove('open', 'in_progress', 'resolved');
      
      // Add new status class
      statusSpan.classList.add(data.status);
      
      // Update text
      statusSpan.textContent = data.status === 'open' ? 'Open' : 
                              data.status === 'in_progress' ? 'In Progress' : 
                              'Resolved';
    }
  }
  
  // Handle new ticket assignment notification
  function handleTicketAssignment(data) {
    if (window.notifications) {
      window.notifications.info(
        `You've been assigned ticket: ${data.ticketTitle}`,
        'New Assignment'
      );
    }
  }
</script>
<script>
  // ...existing code...
  
  // Assign ticket to me
  function assignToMe(ticketId) {
    if (!ticketId) return;
    
    fetch(`/tickets/${ticketId}/assign`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ adminId: '<%= user._id %>' })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (window.notifications) {
            window.notifications.success('Sak tildelt til deg');
          }
          
          // Refresh the page to update the ticket list
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          if (window.notifications) {
            window.notifications.error(data.message || 'Kunne ikke tildele sak');
          }
        }
      })
      .catch(error => {
        console.error('Error assigning ticket:', error);
        if (window.notifications) {
          window.notifications.error('Det oppstod en feil ved tildeling av sak');
        }
      });
  }
  
  // Filter tickets based on selected filters
  function filterTickets() {
    // ...existing code...
  }
  
  // ... rest of existing code ...
</script>
