<%- contentFor('body') %>

<div class="dashboard-container">
  <!-- Left Navbar -->
  <nav class="navbar">
    <div class="navbar-header">
      <div class="logo">
        <i class="fas fa-headset"></i>
        <span class="logo-text">Helpdesk</span>
      </div>
      <div class="navbar-toggle">
        <i class="fas fa-bars"></i>
      </div>
    </div>
    
    <div class="navbar-items">
      <!-- Admin Navigation -->
      <a href="/admin/dashboard" class="navbar-item">
        <i class="fas fa-home"></i>
        <span>Dashboard</span>
      </a>
      <a href="/admin/tickets" class="navbar-item">
        <i class="fas fa-ticket-alt"></i>
        <span>All Tickets</span>
      </a>
      <a href="/admin/messages" class="navbar-item active">
        <i class="fas fa-comments"></i>
        <span>Messages</span>
      </a>
      <a href="/admin/statistics" class="navbar-item">
        <i class="fas fa-chart-bar"></i>
        <span>Statistics</span>
      </a>
      <% if (user.role === 'head_admin') { %>
        <a href="#" class="navbar-item" data-panel="notifications-panel">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/admin/users" class="navbar-item">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      <% } %>
      <a href="#" class="navbar-item" data-panel="settings-panel">
        <i class="fas fa-cog"></i>
        <span>Settings</span>
      </a>
      
      <!-- Logout -->
      <a href="/auth/logout" class="navbar-item">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
      </a>
    </div>
  </nav>
  
  <!-- Main Content -->
  <div class="main-content">
    <!-- Left Panel (Chat Queue) -->
    <div class="panel left-panel">
      <div class="panel-header">
        <h2>Meldingskø</h2>
        <div class="admin-status-indicator">
          <span class="status-dot <%= user.status %>"></span>
          <span class="status-text">
            <%= user.status === 'available' ? 'Tilgjengelig' : 
               user.status === 'working' ? 'Opptatt' : 'Frakoblet' %>
          </span>
          <button id="quick-status-toggle" class="status-toggle-btn" title="Endre status">
            <i class="fas fa-sync-alt"></i>
          </button>
        </div>
      </div>
      <div class="panel-content">
        <div class="chat-queue-section">
          <h3>Ventende forespørsler <span class="queue-count" id="queue-count">0</span></h3>
          <div class="chat-queue" id="chat-queue">
            <div class="empty-queue">
              <p>Ingen ventende chatforespørsler</p>
            </div>
          </div>
        </div>
        
        <div class="chat-tabs-container">
          <h3>Aktive chatter</h3>
          <div class="chat-tabs" id="chat-tabs">
            <div class="empty-tabs">
              <p>Ingen aktive chatter</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Panel Divider -->
    <div class="panel-divider">
      <span class="divider-icon">⋮⋮</span>
    </div>
    
    <!-- Right Panel (Chat View) -->
    <div class="panel right-panel">
      <div class="panel-header">
        <h2 id="chat-header">Meldingssenter</h2>
      </div>
      <div class="panel-content">
        <div id="empty-chat" class="empty-chat">
          <div class="empty-icon">
            <i class="fas fa-comments"></i>
          </div>
          <h3>Ingen aktiv chat</h3>
          <p>Velg en chat fra listen til venstre eller vent på nye forespørsler.</p>
        </div>
        
        <div id="chat-container" class="chat-container" style="display: none;">
          <div id="chat-messages" class="chat-messages"></div>
          
          <div id="chat-input" class="chat-input">
            <form id="chat-form">
              <div id="chat-attachments-preview" class="chat-attachments-preview"></div>
              <div class="input-container">
                <textarea id="message-input" placeholder="Skriv din melding her..." rows="1"></textarea>
                <div class="chat-actions">
                  <label for="file-upload" class="file-upload-label">
                    <i class="fas fa-paperclip"></i>
                  </label>
                  <input type="file" id="file-upload" multiple style="display: none;" accept="image/*, .pdf, .doc, .docx">
                  <button type="submit">
                    <i class="fas fa-paper-plane"></i>
                  </button>
                </div>
              </div>
            </form>
          </div>
          
          <div class="chat-actions-bar">
            <button id="end-chat-btn" class="btn btn-danger">
              <i class="fas fa-times-circle"></i> Avslutt chat
            </button>
            <button id="create-ticket-btn" class="btn btn-secondary">
              <i class="fas fa-ticket-alt"></i> Opprett sak
            </button>
            <button id="transfer-chat-btn" class="btn btn-primary">
              <i class="fas fa-exchange-alt"></i> Overfør chat
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Chat Queue Item Template -->
<template id="queue-item-template">
  <div class="queue-item">
    <div class="queue-item-header">
      <div class="queue-user-info">
        <span class="queue-user-avatar"></span>
        <span class="queue-user-name"></span>
      </div>
      <span class="queue-category"></span>
    </div>
    <div class="queue-item-content"></div>
    <div class="queue-item-actions">
      <button class="btn btn-sm btn-success accept-chat">Aksepter</button>
      <button class="btn btn-sm btn-danger decline-chat">Avvis</button>
    </div>
  </div>
</template>

<!-- Chat Tab Template -->
<template id="chat-tab-template">
  <div class="chat-tab">
    <span class="tab-name"></span>
    <span class="tab-close">
      <i class="fas fa-times"></i>
    </span>
  </div>
</template>

<!-- Transfer Chat Modal -->
<div id="transfer-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Overfør chat</h2>
    <p>Velg en administrator å overføre denne chatten til:</p>
    <div class="admin-list" id="transfer-admin-list">
      <!-- Admin list items will be added here -->
    </div>
    <div class="form-actions">
      <button class="btn btn-secondary" id="transfer-cancel">Avbryt</button>
    </div>
  </div>
</div>

<!-- Create Ticket Modal -->
<div id="create-ticket-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Opprett sak fra chat</h2>
    <form id="create-ticket-form">
      <div class="form-group">
        <label for="ticket-title">Tittel</label>
        <input type="text" id="ticket-title" name="title" required>
      </div>
      <div class="form-group">
        <label for="ticket-category">Kategori</label>
        <select id="ticket-category" name="category" required>
          <option value="technical">Teknisk problem</option>
          <option value="account">Kontoproblem</option>
          <option value="billing">Fakturering</option>
          <option value="feature">Funksjonsforespørsel</option>
          <option value="other">Annet</option>
        </select>
      </div>
      <div class="form-group">
        <label for="ticket-priority">Prioritet</label>
        <select id="ticket-priority" name="priority">
          <option value="low">Lav</option>
          <option value="medium" selected>Middels</option>
          <option value="high">Høy</option>
        </select>
      </div>
      <div class="form-group">
        <label for="ticket-description">Beskrivelse</label>
        <textarea id="ticket-description" name="description" rows="6" required></textarea>
      </div>
      <div class="form-actions">
        <button type="submit" class="btn btn-primary">Opprett sak</button>
        <button type="button" class="btn btn-secondary" id="create-ticket-cancel">Avbryt</button>
      </div>
    </form>
  </div>
</div>

<% contentFor('script') %>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/dashboard.js"></script>
<script>
  let socket;
  let currentChat = null;
  let activeChats = {};
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize socket connection
    initSocket();
    
    // Quick status toggle
    document.getElementById('quick-status-toggle').addEventListener('click', toggleStatus);
    
    // Set up conversation click handler
    const conversationItems = document.querySelectorAll('.conversation-item');
    conversationItems.forEach(item => {
      item.addEventListener('click', function() {
        const userId = this.getAttribute('data-id');
        loadConversation(userId);
      });
    });
  });
  
  function initSocket() {
    socket = io();
    
    socket.on('connect', function() {
      console.log('Connected to socket server');
      
      // Notify server of admin's online status and get pending chats
      socket.emit('admin-online', {
        status: '<%= user.status %>',
        specializations: <%- JSON.stringify(user.specializations || []) %>,
        maxChats: <%= user.maxConcurrentChats || 3 %>
      });
    });
    
    // Listen for new chat requests
    socket.on('chat-request', function(data) {
      addChatRequest(data);
    });
    
    // Listen for chat request cancellations
    socket.on('chat-request-cancelled', function(data) {
      removeChatRequest(data.requestId);
    });
    
    // Listen for new messages
    socket.on('new-message', function(data) {
      handleNewMessage(data);
    });
  }
  
  function toggleStatus() {
    const currentStatus = '<%= user.status %>';
    let newStatus;
    
    // Cycle through statuses
    if (currentStatus === 'available') {
      newStatus = 'working';
    } else if (currentStatus === 'working') {
      newStatus = 'offline';
    } else {
      newStatus = 'available';
    }
    
    // Update status on server
    fetch('/admin/settings/update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        status: newStatus
      })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Update UI
          updateStatusUI(newStatus);
          
          // Update socket status
          if (socket) {
            socket.emit('admin-status-change', { status: newStatus });
          }
          
          if (window.notifications) {
            window.notifications.success(`Status changed to ${newStatus}`);
          }
        }
      })
      .catch(error => {
        console.error('Error updating status:', error);
      });
  }
  
  function updateStatusUI(status) {
    const statusDot = document.querySelector('.status-dot');
    const statusText = document.querySelector('.status-text');
    
    // Remove current status classes
    statusDot.classList.remove('available', 'working', 'offline');
    
    // Add new status class
    statusDot.classList.add(status);
    
    // Update text
    statusText.textContent = status.charAt(0).toUpperCase() + status.slice(1);
  }
  
  function addChatRequest(data) {
    // Get the queue section
    const queueSection = document.getElementById('chat-queue');
    const emptyQueue = queueSection.querySelector('.empty-queue');
    
    // Hide empty message if it exists
    if (emptyQueue) {
      emptyQueue.style.display = 'none';
    }
    
    // Create a new chat request item from template
    const template = document.getElementById('queue-item-template');
    const newItem = document.importNode(template.content, true).querySelector('.queue-item');
    
    // Add request ID
    newItem.setAttribute('data-request-id', data.requestId);
    
    // Set user info
    newItem.querySelector('.queue-user-avatar').textContent = data.user.name.charAt(0).toUpperCase();
    newItem.querySelector('.queue-user-name').textContent = data.user.name;
    
    // Set category if available
    if (data.category) {
      const categoryEl = newItem.querySelector('.queue-category');
      categoryEl.textContent = data.category.charAt(0).toUpperCase() + data.category.slice(1);
      categoryEl.classList.add(`category-${data.category}`);
    }
    
    // Set message content
    newItem.querySelector('.queue-item-content').textContent = data.message || 'New chat request';
    
    // Add event listeners to buttons
    newItem.querySelector('.accept-chat').addEventListener('click', function() {
      acceptChatRequest(data.requestId, data.user.id);
    });
    
    newItem.querySelector('.decline-chat').addEventListener('click', function() {
      declineChatRequest(data.requestId);
    });
    
    // Add to queue
    queueSection.appendChild(newItem);
    
    // Update count
    updateQueueCount();
    
    // Show notification
    if (window.notifications) {
      window.notifications.info('New chat request from ' + data.user.name, 'Chat Request');
    }
  }
  
  function updateQueueCount() {
    const count = document.querySelectorAll('#chat-queue .queue-item').length;
    document.getElementById('queue-count').textContent = count;
  }
  
  function removeChatRequest(requestId) {
    const requestItem = document.querySelector(`#chat-queue .queue-item[data-request-id="${requestId}"]`);
    
    if (requestItem) {
      requestItem.remove();
      updateQueueCount();
      
      // Show empty message if no requests
      if (document.querySelectorAll('#chat-queue .queue-item').length === 0) {
        const queueSection = document.getElementById('chat-queue');
        if (!queueSection.querySelector('.empty-queue')) {
          const emptyEl = document.createElement('div');
          emptyEl.className = 'empty-queue';
          emptyEl.innerHTML = '<p>No pending chat requests</p>';
          queueSection.appendChild(emptyEl);
        } else {
          queueSection.querySelector('.empty-queue').style.display = 'block';
        }
      }
    }
  }
  
  function acceptChatRequest(requestId, userId) {
    // Tell server we accept this chat
    socket.emit('accept-chat-request', {
      requestId: requestId,
      userId: userId
    });
    
    // Remove from queue
    removeChatRequest(requestId);
    
    // Load the conversation
    loadConversation(userId);
  }
  
  function declineChatRequest(requestId) {
    // Tell server we declined this chat
    socket.emit('decline-chat-request', {
      requestId: requestId
    });
    
    // Remove from queue
    removeChatRequest(requestId);
  }
  
  function loadConversation(userId) {
    // If this chat is already active, just switch to it
    if (activeChats[userId]) {
      switchToChat(userId);
      return;
    }
    
    // Get conversation from server
    fetch(`/chat/conversation/${userId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Store in active chats
          activeChats[userId] = {
            user: data.user,
            messages: data.messages
          };
          
          // Create a new tab
          createChatTab(userId, data.user.name);
          
          // Switch to this chat
          switchToChat(userId);
          
          // Mark conversation as read on UI
          const conversationItem = document.querySelector(`.conversation-item[data-id="${userId}"]`);
          if (conversationItem) {
            conversationItem.classList.remove('unread');
            conversationItem.querySelector('.unread-badge')?.remove();
          }
        } else {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          }
        }
      })
      .catch(error => {
        console.error('Error loading conversation:', error);
      });
  }
  
  function createChatTab(userId, userName) {
    // Create tab from template
    const template = document.getElementById('chat-tab-template');
    const newTab = document.importNode(template.content, true).querySelector('.chat-tab');
    
    // Set attributes
    newTab.setAttribute('data-user-id', userId);
    newTab.querySelector('.tab-name').textContent = userName;
    
    // Add event listener for tab click
    newTab.addEventListener('click', function(e) {
      if (!e.target.closest('.tab-close')) {
        switchToChat(userId);
      }
    });
    
    // Add event listener for close button
    newTab.querySelector('.tab-close').addEventListener('click', function(e) {
      e.stopPropagation();
      closeChat(userId);
    });
    
    // Add to tab container
    document.getElementById('chat-tabs').appendChild(newTab);
    
    // Also add to mobile tabs
    const mobileTab = newTab.cloneNode(true);
    mobileTab.addEventListener('click', function(e) {
      if (!e.target.closest('.tab-close')) {
        switchToChat(userId);
      }
    });
    
    mobileTab.querySelector('.tab-close').addEventListener('click', function(e) {
      e.stopPropagation();
      closeChat(userId);
    });
    
    document.getElementById('mobile-chat-tabs').appendChild(mobileTab);
  }
  
  function switchToChat(userId) {
    if (!activeChats[userId]) return;
    
    // Update current chat
    currentChat = userId;
    
    // Update header
    document.getElementById('conversation-header').textContent = activeChats[userId].user.name;
    
    // Show chat interface
    document.getElementById('empty-chat').style.display = 'none';
    document.getElementById('chat-messages').style.display = 'block';
    document.getElementById('chat-input-container').style.display = 'block';
    
    // Highlight active tab
    document.querySelectorAll('.chat-tab').forEach(tab => {
      tab.classList.remove('active');
      if (tab.getAttribute('data-user-id') === userId) {
        tab.classList.add('active');
      }
    });
    
    // Highlight active conversation
    document.querySelectorAll('.conversation-item').forEach(item => {
      item.classList.remove('active');
      item.setAttribute('data-active', 'false');
      if (item.getAttribute('data-id') === userId) {
        item.classList.add('active');
        item.setAttribute('data-active', 'true');
      }
    });
    
    // Load messages
    loadMessages(userId);
    
    // Mark as read on server
    fetch(`/chat/mark-read/${userId}`, { method: 'POST' })
      .catch(error => console.error('Error marking messages as read:', error));
  }
  
  function loadMessages(userId) {
    const messagesContainer = document.getElementById('chat-messages');
    messagesContainer.innerHTML = '';
    
    // Get messages from active chats
    const chat = activeChats[userId];
    if (!chat || !chat.messages) return;
    
    // Add messages to container
    chat.messages.forEach(message => {
      const isFromCurrentUser = message.sender._id === '<%= user._id %>';
      
      const messageEl = document.createElement('div');
      messageEl.className = `message ${isFromCurrentUser ? 'outgoing' : 'incoming'}`;
      
      const avatarEl = document.createElement('div');
      avatarEl.className = 'message-avatar';
      avatarEl.textContent = message.sender.name.charAt(0).toUpperCase();
      
      const contentEl = document.createElement('div');
      contentEl.className = 'message-content';
      
      const senderEl = document.createElement('div');
      senderEl.className = 'message-sender';
      senderEl.textContent = message.sender.name;
      
      if (message.sender.role === 'admin' || message.sender.role === 'head_admin') {
        const badgeEl = document.createElement('span');
        badgeEl.className = 'badge admin-badge';
        badgeEl.textContent = 'Admin';
        senderEl.appendChild(badgeEl);
      }
      
      const bubbleEl = document.createElement('div');
      bubbleEl.className = 'message-bubble';
      bubbleEl.textContent = message.content;
      
      const timeEl = document.createElement('div');
      timeEl.className = 'message-time';
      timeEl.textContent = new Date(message.createdAt).toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      
      contentEl.appendChild(senderEl);
      contentEl.appendChild(bubbleEl);
      contentEl.appendChild(timeEl);
      
      messageEl.appendChild(avatarEl);
      messageEl.appendChild(contentEl);
      
      messagesContainer.appendChild(messageEl);
    });
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
  
  function closeChat(userId) {
    if (!activeChats[userId]) return;
    
    // Remove from active chats
    delete activeChats[userId];
    
    // Remove tabs
    document.querySelectorAll(`.chat-tab[data-user-id="${userId}"]`).forEach(tab => {
      tab.remove();
    });
    
    // If this was the current chat, switch to another or show empty
    if (currentChat === userId) {
      const chatIds = Object.keys(activeChats);
      
      if (chatIds.length > 0) {
        switchToChat(chatIds[0]);
      } else {
        // Show empty state
        currentChat = null;
        document.getElementById('conversation-header').textContent = 'Select a conversation';
        document.getElementById('empty-chat').style.display = 'block';
        document.getElementById('chat-messages').style.display = 'none';
        document.getElementById('chat-input-container').style.display = 'none';
      }
    }
  }
  
  function sendMessage() {
    if (!currentChat) return;
    
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    // Clear input
    messageInput.value = '';
    
    // Send message to server
    fetch('/chat/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        recipientId: currentChat,
        message
      })
    })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          if (window.notifications) {
            window.notifications.error(data.message, 'Error');
          }
        }
      })
      .catch(error => {
        console.error('Error sending message:', error);
      });
  }
  
  function handleNewMessage(data) {
    // Check if this is for a current chat
    if (activeChats[data.sender.id] || activeChats[data.recipient.id]) {
      const chatId = data.sender.id === '<%= user._id %>' ? 
                    data.recipient.id : data.sender.id;
      
      // Add to messages array
      if (activeChats[chatId]) {
        activeChats[chatId].messages.push(data);
        
        // If this is the current chat, update the view
        if (currentChat === chatId) {
          appendMessageToView(data);
        } else {
          // Add unread indicator to tab
          document.querySelectorAll(`.chat-tab[data-user-id="${chatId}"]`).forEach(tab => {
            if (!tab.classList.contains('unread')) {
              tab.classList.add('unread');
            }
          });
        }
      }
    } else {
      // This is a new conversation
      // Create notification for new message
      if (window.notifications) {
        window.notifications.info(
          `New message from ${data.sender.name}: ${data.message.substring(0, 30)}...`,
          'New Message'
        );
      }
      
      // Add to conversations list at the top
      // This would need to be implemented on a page refresh or with a server call
      // to get the full conversation details
    }
  }
  
  function appendMessageToView(data) {
    const messagesContainer = document.getElementById('chat-messages');
    const isFromCurrentUser = data.sender.id === '<%= user._id %>';
    
    const messageEl = document.createElement('div');
    messageEl.className = `message ${isFromCurrentUser ? 'outgoing' : 'incoming'}`;
    
    const avatarEl = document.createElement('div');
    avatarEl.className = 'message-avatar';
    avatarEl.textContent = data.sender.name.charAt(0).toUpperCase();
    
    const contentEl = document.createElement('div');
    contentEl.className = 'message-content';
    
    const senderEl = document.createElement('div');
    senderEl.className = 'message-sender';
    senderEl.textContent = data.sender.name;
    
    if (data.sender.role === 'admin' || data.sender.role === 'head_admin') {
      const badgeEl = document.createElement('span');
      badgeEl.className = 'badge admin-badge';
      badgeEl.textContent = 'Admin';
      senderEl.appendChild(badgeEl);
    }
    
    const bubbleEl = document.createElement('div');
    bubbleEl.className = 'message-bubble';
    bubbleEl.textContent = data.message;
    
    const timeEl = document.createElement('div');
    timeEl.className = 'message-time';
    timeEl.textContent = new Date().toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    contentEl.appendChild(senderEl);
    contentEl.appendChild(bubbleEl);
    contentEl.appendChild(timeEl);
    
    messageEl.appendChild(avatarEl);
    messageEl.appendChild(contentEl);
    
    messagesContainer.appendChild(messageEl);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
</script>
